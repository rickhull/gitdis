#!/usr/bin/env ruby

require 'yaml'
require 'slop'
require 'gitdis'

opts = Slop.parse { |o|
  o.banner = "USAGE: gitdis path/to/config.yaml [options]"
  o.separator '  Environment selection'
  o.string '-e', '--environment', 'select within YAML[environments]'
  o.separator '  Redis overrides'
  o.string  '-H', '--redis-host', 'string'
  o.integer '-p', '--redis-port', 'number'
  o.integer '-d', '--redis-db',   'number'
  o.separator '  Git repo overrides'
  o.string '-r', '--git-repo',   'path/to/repo_dir'
  o.string '-b', '--git-branch', 'e.g. master'
  o.separator '  Other options'
  o.bool '-D', '--dump', 'Just dump Redis contents per YAML keymap'
  o.on   '-h', '--help' do
    puts o
    exit
  end
}

unless(yaml_file = opts.arguments.shift)
  puts opts
  puts "path/to/config.yaml is required"
  exit 1
end

config = YAML.load_file(yaml_file)
env_config = {}
if opts[:environment]
  env = opts[:environment].downcase
  if config['environments']
    envs = config.delete('environments')
    if envs[env]
      puts "found #{env} env"
      env_config = envs[env]
      warn "env_config is a #{env_config.class}" unless env_config.is_a?(Hash)
    else
      warn "no environment #{env} found in #{yaml_file}"
      exit 1
    end
  else
    warn "no environments config found"
    exit 1
  end
end
config.merge!(env_config)
redis_options = {}

# update config with any settings from opts
# split out redis options
%w[git-repo git-branch redis-host redis-port redis-db].each { |item|
  opt_value = opts[item.to_sym]
  puts [item, opt_value].join(': ')
  config[item] = opt_value if opt_value
  if item.match /^redis/
    cfg_value = config[item]
    redis_options[item.split('-').last.to_sym] = cfg_value if cfg_value
  end
}
puts "Redis options: #{redis_options}"

keymap = config.fetch('keymap')

if opts.dump?
  GitDis.dump(keymap.keys, redis_options)
else
  repo = config.fetch('git-repo')
  branch = config.fetch('git-branch')
  GitDis.new(repo, redis_options).git_pull(branch).update(keymap)
end
